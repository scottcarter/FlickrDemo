
// ====================================================
//
//    DO NOT EDIT.  Auto Generated by AppDeveloperKit.
//
// =====================================================
//

import AppDeveloperKit

extension RecentsTableViewController {

   func adk_deinitRecentsTableViewController() {

       let adk = ADK_Config.shared()

       adk.deregisterClass(sender: self)
   }

   func adk_initRecentsTableViewController() {

       let adk = ADK_Config.shared()

       weak var weakSelf: RecentsTableViewController? = self

       adk.registerClass(sender: self, name: "RecentsTableViewController")


       adk.configDouble(sender: self, name: "rowHeight", initComplete: { (data) in
           if data != nil {
               weakSelf?._rowHeight = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.rowHeight = data!
           }
       })


   }
}


extension BookmarksTableViewController {

   func adk_deinitBookmarksTableViewController() {

       let adk = ADK_Config.shared()

       adk.deregisterClass(sender: self)
   }

   func adk_initBookmarksTableViewController() {

       let adk = ADK_Config.shared()

       weak var weakSelf: BookmarksTableViewController? = self

       adk.registerClass(sender: self, name: "BookmarksTableViewController")


       adk.configDouble(sender: self, name: "rowHeight", initComplete: { (data) in
           if data != nil {
               weakSelf?._rowHeight = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.rowHeight = data!
           }
       })


   }
}


extension TilesCollectionViewController {

   func adk_deinitTilesCollectionViewController() {

       let adk = ADK_Config.shared()

       adk.deregisterClass(sender: self)
   }

   func adk_initTilesCollectionViewController() {

       let adk = ADK_Config.shared()

       weak var weakSelf: TilesCollectionViewController? = self

       adk.registerClass(sender: self, name: "TilesCollectionViewController")


       adk.configDouble(sender: self, name: "minimumInteritemSpacing", initComplete: { (data) in
           if data != nil {
               weakSelf?._minimumInteritemSpacing = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.minimumInteritemSpacing = data!
           }
       })


       adk.configDouble(sender: self, name: "minimumLineSpacing", initComplete: { (data) in
           if data != nil {
               weakSelf?._minimumLineSpacing = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.minimumLineSpacing = data!
           }
       })


       adk.configBool(sender: self, name: "scrollDirectionVertical", initComplete: { (data) in
           if data != nil {
               weakSelf?._scrollDirectionVertical = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.scrollDirectionVertical = data!
           }
       })


       adk.configInt(sender: self, name: "numTileElements", initComplete: { (data) in
           if data != nil {
               weakSelf?._numTileElements = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.numTileElements = data!
           }
       })


       adk.configColor(sender: self, name: "viewBackgroundColor", initComplete: { (data) in
           if data != nil {
               weakSelf?._viewBackgroundColor = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.viewBackgroundColor = data!
           }
       })


       adk.configDouble(sender: self, name: "tileCornerRadiusWidthPercentage", initComplete: { (data) in
           if data != nil {
               weakSelf?._tileCornerRadiusWidthPercentage = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.tileCornerRadiusWidthPercentage = data!
           }
       })


       adk.configColor(sender: self, name: "tileBorderColor", initComplete: { (data) in
           if data != nil {
               weakSelf?._tileBorderColor = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.tileBorderColor = data!
           }
       })


       adk.configDouble(sender: self, name: "tileBorderWidth", initComplete: { (data) in
           if data != nil {
               weakSelf?._tileBorderWidth = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.tileBorderWidth = data!
           }
       })


       adk.configDouble(sender: self, name: "tileImageTopConstraint", initComplete: { (data) in
           if data != nil {
               weakSelf?._tileImageTopConstraint = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.tileImageTopConstraint = data!
           }
       })


       adk.configDouble(sender: self, name: "tileImageBottomConstraint", initComplete: { (data) in
           if data != nil {
               weakSelf?._tileImageBottomConstraint = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.tileImageBottomConstraint = data!
           }
       })


       adk.configDouble(sender: self, name: "tileImageLeftConstraint", initComplete: { (data) in
           if data != nil {
               weakSelf?._tileImageLeftConstraint = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.tileImageLeftConstraint = data!
           }
       })


       adk.configDouble(sender: self, name: "tileImageRightConstraint", initComplete: { (data) in
           if data != nil {
               weakSelf?._tileImageRightConstraint = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.tileImageRightConstraint = data!
           }
       })


       adk.configDouble(sender: self, name: "tileImageCornerRadiusWidthPercentage", initComplete: { (data) in
           if data != nil {
               weakSelf?._tileImageCornerRadiusWidthPercentage = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.tileImageCornerRadiusWidthPercentage = data!
           }
       })


       adk.configColor(sender: self, name: "tileBackgroundColor", initComplete: { (data) in
           if data != nil {
               weakSelf?._tileBackgroundColor = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.tileBackgroundColor = data!
           }
       })


   }
}


extension TilesViewController {

   func adk_deinitTilesViewController() {

       let adk = ADK_Config.shared()

       adk.deregisterClass(sender: self)
   }

   func adk_initTilesViewController() {

       let adk = ADK_Config.shared()

       weak var weakSelf: TilesViewController? = self

       adk.registerClass(sender: self, name: "TilesViewController")


       adk.configColor(sender: self, name: "wrapperBackgroundColor", initComplete: { (data) in
           if data != nil {
               weakSelf?._wrapperBackgroundColor = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.wrapperBackgroundColor = data!
           }
       })


       adk.configDouble(sender: self, name: "wrapperRightConstraint", initComplete: { (data) in
           if data != nil {
               weakSelf?._wrapperRightConstraint = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.wrapperRightConstraint = data!
           }
       })


       adk.configDouble(sender: self, name: "wrapperLeftConstraint", initComplete: { (data) in
           if data != nil {
               weakSelf?._wrapperLeftConstraint = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.wrapperLeftConstraint = data!
           }
       })


       adk.configDouble(sender: self, name: "wrapperTopConstraint", initComplete: { (data) in
           if data != nil {
               weakSelf?._wrapperTopConstraint = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.wrapperTopConstraint = data!
           }
       })


       adk.configDouble(sender: self, name: "wrapperBottomConstraint", initComplete: { (data) in
           if data != nil {
               weakSelf?._wrapperBottomConstraint = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.wrapperBottomConstraint = data!
           }
       })


   }
}


extension PresentAnimator {

   func adk_deinitPresentAnimator() {

       let adk = ADK_Config.shared()

       adk.deregisterClass(sender: self)
   }

   func adk_initPresentAnimator() {

       let adk = ADK_Config.shared()

       weak var weakSelf: PresentAnimator? = self

       adk.registerClass(sender: self, name: "PresentAnimator")


       adk.configDouble(sender: self, name: "animationDuration", initComplete: { (data) in
           if data != nil {
               weakSelf?._animationDuration = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.animationDuration = data!
           }
       })


       adk.configBool(sender: self, name: "flipAnimation", initComplete: { (data) in
           if data != nil {
               weakSelf?._flipAnimation = data!
           }
       }, changeComplete: { (data) in
           if data != nil {
               weakSelf?.flipAnimation = data!
           }
       })


   }
}


